<?xml version="1.0" encoding="UTF-8"?>


<launch>

 <param name="limit_theta" type="bool" value="false"/> <!-- used by the partical filter-->

<include  file="$(find zed_wrapper)/launch/zed2.launch">
	<arg name="publish_tf"       value="true"/>
	<arg name="cam_pos_x"        value="-.1"/>
	<arg name="cam_pos_z"        value="-.055"/>
	<arg name="cam_yaw"          value="-3.14159"/>
</include>
<!-- ouster launch with params 
<include  file="$(find realsense2_camera)/launch/rs_camera.launch">
	<arg name="align_depth"       value="true"/>
	<arg name="unite_imu_method"  value="linear_interpolation"/>
	<arg name="enable_gyro"       value="true"/>
	<arg name="enable_accel"      value="true"/>
</include>



<include  file="$(find ouster_ros)/os1.launch">
	<arg name="os1_hostname"     value="192.168.1.142"/>
	<arg name="os1_udp_dest"     value="192.168.1.108"/>
	<arg name="lidar_mode"       value="2048x10"/>
	<arg name="viz"              value="false"/>
</include>
-->

<!-- Publishes rgbd_image from realsense camera stream

<node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">
  <remap from="rgb/image"       to="/camera/color/image_raw"/>
  <remap from="depth/image"     to="/camera/aligned_depth_to_color/image_raw"/>
  <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
  <remap from="rgbd_image"       to="rgbd_image"/>

  <param name="approx_sync"       value="false"/>
</node>
-->

<!-- Estimates odometrys visually from the rgbd_image from last node 
<node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
  <param name="subscribe_rgbd" type="bool"   value="true"/>
  <param name="frame_id"       type="string" value="base_link"/>
  <param name="publish_tf"       type="bool" value="false"/> 

  <remap from="rgbd_image" to="rgbd_image"/>
</node>
-->


<!-- transforms-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster_realsense" args="0 0 0 0 0 0 base_link camera_link" />

  <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster_lidar" args="-.035 0 .045 0 0 0 base_link os1_sensor" />

  <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster_zed" args="-.1 0 .055 -3.14159 0 0 base_link zed2_camera_center" />


<!-- Visualize-->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find DINGO)/rviz/rtab_map_settings.rviz" output="screen"/>
   <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
    <remap from="rgb/image"       to="/data_throttled_image"/>
    <remap from="depth/image"     to="/data_throttled_image_depth"/>
    <remap from="rgb/camera_info" to="/data_throttled_camera_info"/>
    <remap from="cloud"           to="voxel_cloud" />

    <param name="rgb/image_transport"   type="string" value="compressed"/>
    <param name="depth/image_transport" type="string" value="compressedDepth"/>

    <param name="queue_size" type="int" value="10"/>
    <param name="voxel_size" type="double" value="0.01"/>
  </node>


<!-- UKF fusion for odometry 
<include  file="$(find robot_localization)/launch/ukf_DINGO.launch">
	<arg name="two_d_mode"     value="true"/>
</include>
-->

<!-- locates human in /odom frame 
<node pkg="human_walk_pf_python" type="human_walk_pf_python.py" name="human_walk_pf_python" />
-->

<!-- launches rt_gene if folder is build in DINGO_ws 
<include  file="$(find rt_gene)/launch/estimate_gaze_zed2.launch"/>
-->

<!-- publishes human head pose in /odom frame -->
<node pkg="head_tf_to_pose" type="head_tf_to_pose.py" name="head_tf_to_pose" />


<!-- sets goal pose infront of human
<node pkg="pose_predictor_predictive" type="pose_predictor_predictive" name="pose_predictor_predictive" />
-->

</launch>
